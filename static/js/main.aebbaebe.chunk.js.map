{"version":3,"sources":["Components/Display.js","Components/SortButton.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","sortingAlgo","array","start","finishSort","useState","testArray","setTestArray","selectedValue","setSelectedValue","setWillStart","useEffect","selection","delay","insertionSort","bubbleSort","selectionSort","timer","ms","Promise","res","setTimeout","a","i","length","j","console","log","swap","temp","isSorted","counter","lowest","needsSort","map","value","index","style","height","width","backgroundColor","margin","borderRadius","SortButton","successCallBack","onClick","e","target","className","App","setArray","isStarting","setIsStarting","sortAlgo","setSortAlgo","useSortAlgoFunction","Array","from","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aebbaebe.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\n\r\n\r\n\r\nconst Display = (props) => {\r\n    const {sortingAlgo, array, start, finishSort} = props\r\n    \r\n    \r\n    const [testArray,setTestArray] = useState([])\r\n    const [selectedValue, setSelectedValue] = useState()\r\n    const [willStart, setWillStart] = useState()\r\n    \r\n    \r\n    useEffect (()=>\r\n        setTestArray([...array]), \r\n        [array]\r\n    )\r\n    // useEffect (()=>\r\n    //     setWillStart(start), \r\n    //     [start]\r\n    // )\r\n\r\n    useEffect (()=>\r\n        selection([...testArray]), \r\n        [start]\r\n    )\r\n    \r\n    let delay = 150\r\n    \r\n    const selection = (array) =>{\r\n        setWillStart(false)\r\n        if (sortingAlgo == \"Insertion\"){\r\n            insertionSort(array)\r\n        }\r\n        else if (sortingAlgo == \"Bubble\"){\r\n            bubbleSort(array)\r\n        }\r\n        else if (sortingAlgo == \"Selection\"){\r\n            selectionSort(array)\r\n        }\r\n        // else if (sortingAlgo == \"quick\"){\r\n        //     quickSort(array)\r\n        // }\r\n    }\r\n    \r\n    //**********************************SORTING ALGOS*********************************************/\r\n    \r\n    const timer = ms => new Promise(res => setTimeout(res, ms))\r\n    \r\n    \r\n    async function insertionSort(array) {\r\n        \r\n        for (let i = 1; i < array.length; i++){\r\n            let j = i\r\n            setSelectedValue(j)\r\n            console.log(selectedValue)\r\n            while (j > 0 && array[j] < array[j-1]){\r\n                swap (j, j-1, array)\r\n                j-=1\r\n                setSelectedValue(j)\r\n                setTestArray([...array])\r\n                await timer(delay)\r\n            }\r\n            setTestArray([...array])\r\n            await timer(delay)\r\n        }\r\n        setSelectedValue(\"\")\r\n        finishSort()\r\n    }\r\n\r\n    function swap(i, j, array){\r\n        const temp = array[j]\r\n        array[j] = array[i]\r\n        array[i] = temp\r\n    }\r\n\r\n\r\n    async function bubbleSort(array){\r\n        let isSorted = false\r\n        let counter = 0\r\n        while (!isSorted) {\r\n            isSorted = true\r\n            for (let i = 0; i < array.length - 1 - counter; i++){\r\n                setSelectedValue(i)\r\n                setTestArray([...array])\r\n                await timer(delay)\r\n                if (array[i] > array[i+1]) {\r\n                    swap (i, i+1, array)\r\n                    isSorted = false\r\n                }\r\n\t\t\t}\r\n            counter++\r\n\t\t}\r\n        setTestArray([...array])\r\n        setSelectedValue(\"\")\r\n        finishSort()\r\n    }\r\n\r\n\r\n    const selectionSort= async (array) => {\r\n        for (let i = 0; i < array.length; i++){\r\n            let lowest = i \r\n            let needsSort = false\r\n            for (let j = i+1; j < array.length; j++){\r\n                setSelectedValue(j)\r\n                setTestArray([...array])\r\n                await timer(delay)\r\n                if (array[j] < array[lowest]){\r\n                    lowest = j\r\n                    needsSort = true\r\n                }\r\n            }\r\n            if (needsSort){\r\n                swap(i, lowest, array)\r\n            } \r\n        }\r\n        setTestArray([...array])\r\n        setSelectedValue(\"\")\r\n        finishSort()\r\n    }\r\n\r\n\r\n\r\n    // function quickSort(array) {\r\n    //     quickSortHelper(array, 0, array.length - 1)\r\n    //     // await timer(200)\r\n    //     setTestArray([...array])\r\n    // }\r\n    \r\n    // async function quickSortHelper(array, start, end){\r\n\r\n\r\n    //     if (start >= end){\r\n    //         setSelectedValue(\"\")\r\n    //         setSelectedValue2(\"\")\r\n    //         setSelectedValue3(\"\")\r\n    //         setTestArray([...array]) \r\n    //         return\r\n    //     }\r\n    //     const pivot = start\r\n    //     let left = start + 1\r\n    //     let right = end\r\n\r\n    //     while (right >= left){\r\n    //         setSelectedValue(left)\r\n    //         setSelectedValue2(right)\r\n    //         setSelectedValue3(pivot)\r\n    //         setTestArray([...array])\r\n    //         await timer(delay)\r\n    //         if (array[left] > array[pivot] && array[right] < array[pivot]){\r\n    //             swap(left, right, array)\r\n    //         }\r\n    //         if (array[left] <= array[pivot]){\r\n    //             left++\r\n    //         }\r\n    //         if (array[right] >= array[pivot]){\r\n    //             right--\r\n    //         }\r\n    //     }\r\n    //     swap(pivot, right, array)\r\n    //     const leftSubarrayIsSmaller = right - 1 - start < end - (right+1)\r\n    //     if (leftSubarrayIsSmaller){\r\n    //         quickSortHelper(array, start, right - 1)\r\n    //         quickSortHelper(array, right+1, end) \r\n    //     } else{\r\n    //         quickSortHelper(array, right + 1, end)\r\n    //         quickSortHelper(array, start, right - 1)\r\n    //     }\r\n    // }\r\n\r\n\r\n    //**********************************SORTING ALGOS*********************************************/\r\n\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                testArray.map((value, index) =>\r\n                \r\n                    index === selectedValue  ?\r\n                        <div key = {index} style={{\r\n                            height: `10px`,\r\n                            width:`${value * 10}px`,\r\n                            backgroundColor: \"gold\",\r\n                            margin:\"5px\",\r\n                            borderRadius: \"25px\"\r\n                        }}></div>\r\n                            :<div key = {index} style={{\r\n                                height: `10px`,\r\n                                width:`${value * 10}px`,\r\n                                backgroundColor: \"blue\",\r\n                                margin:\"5px\",\r\n                                borderRadius: \"25px\"\r\n                            }}></div>\r\n                    \r\n                \r\n                ) \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display","import React, { useEffect, useState } from 'react';\r\n\r\n\r\n\r\nconst SortButton = (props) => {\r\n    const {sortingAlgo, successCallBack} = props;\r\n    const [algo, setAlgo] = useState(\"\")\r\n    \r\n\r\n    const updateStatus = e => {\r\n        successCallBack(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <button value={sortingAlgo} onClick={updateStatus} className=\"sortChoice\">\r\n                    {sortingAlgo}\r\n                </button>\r\n        </div>\r\n    )\r\n}\r\nexport default SortButton;","import Display from './Components/Display';\nimport SortButton from './Components/SortButton';\n\n\nimport {useState} from 'react'\nimport './App.css';\n\nfunction App() {\n\n  const [array, setArray] = useState([])\n  const [isStarting, setIsStarting] = useState()\n\n  const [sortAlgo, setSortAlgo] = useState(\"\")\n\n  const generateArray = ()=>{\n    setArray(Array.from({length: 30}, () => Math.floor(Math.random() * 50 + 1)))\n    console.log(array)\n  }\n\n  const useSortAlgoFunction = (e)=>{\n    setSortAlgo(e)\n    console.log(sortAlgo)\n  }\n\n  const start = () =>{\n    setIsStarting(true)\n  }\n\n  const setStartingToFalse = () =>{\n    setIsStarting(false)\n    console.log(isStarting)\n  }\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <button onClick={generateArray} className=\"sortButton\">Generate Array</button>\n        <div className='sortButtonsDiv'>\n          <SortButton sortingAlgo=\"Insertion\" successCallBack={useSortAlgoFunction} />\n          <SortButton sortingAlgo=\"Bubble\" successCallBack={useSortAlgoFunction}/>\n          <SortButton sortingAlgo=\"Selection\" successCallBack={useSortAlgoFunction}/>\n        </div>\n        <h4>Sort Algo: {sortAlgo}</h4>\n        <button onClick={start} className=\"sortButton\">Sort!</button>\n      </nav>\n      <Display sortingAlgo = {sortAlgo} array = {array} start = {isStarting} finishSort={setStartingToFalse}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}